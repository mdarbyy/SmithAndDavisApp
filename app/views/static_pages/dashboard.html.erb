<% if @start_date.blank? || @end_date.blank? %>
  <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
    <div class="card p-4 shadow" style="max-width: 500px; width: 100%;">
      <h4 class="mb-3 text-center">Select Date Range</h4>
      <%= form_with url: dashboard_path, method: :get, local: true do |form| %>
        <div class="mb-3">
          <%= form.label :start_date, "Start Date", class: "form-label" %>
          <%= form.date_field :start_date, class: "form-control", required: true, value: params[:start_date].presence || Date.current.strftime("%Y-%m-%d") %>
        </div>
        <div class="mb-3">
          <%= form.label :end_date, "End Date", class: "form-label" %>
          <%= form.date_field :end_date, class: "form-control", required: true, value: params[:end_date].presence || Date.current.strftime("%Y-%m-%d") %>
        </div>
        <div class="d-flex justify-content-end">
          <%= form.submit "View Dashboard", class: "btn btn-main" %>
        </div>
      <% end %>
    </div>
  </div>
<% else %>
    
	<div class="modal fade" id="salesRecordsModal" tabindex="-1" aria-labelledby="salesRecordsModalLabel" aria-hidden="true">
		<div class="modal-dialog custom-modal">
			<div class="modal-content" style="width: 750px;">
				<div class="modal-header">
					<h5 class="modal-title" id="salesRecordsModalLabel">Sales Records for <b><span id="salesPersonName"></span></b> (<span id="salesPersonRecordCount"></span>)</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body custom-modal">
					<div id="content-scroll" style="max-height: 75vh;">
						<table class="table content" id="content-table">
							<thead>
								<tr>
									<th class="stick" scope="col">Sell Date</th>
									<th class="stick" scope="col">Item Name</th>
									<th class="stick" scope="col">Item Price</th>
								</tr>
							</thead>
							<tbody id="totalSalesTableBody">
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="container-fluid">
		<div class="row">
			<div class="col-12 col-md-3">
				<div class="card p-4 shadow-sm">
					<h5 class="mb-3 text-center">Change Date Range</h5>
					<%= form_with url: dashboard_path, method: :get, local: true do |form| %>
						<div class="mb-3">
							<%= form.label :start_date, "Start Date", class: "form-label" %>
							<%= form.date_field :start_date, class: "form-control", value: params[:start_date], required: true %>
						</div>
						<div class="mb-3">
							<%= form.label :end_date, "End Date", class: "form-label" %>
							<%= form.date_field :end_date, class: "form-control", value: params[:end_date], required: true %>
						</div>
						<div class="d-flex justify-content-end">
							<%= form.submit "Submit", class: "btn btn-main" %>
						</div>
					<% end %>
				</div>
			</div>

			<div class="col-12 col-md-9">
				<ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
					<li class="nav-item" role="presentation">
						<a class="nav-link active" id="total-sales-tab" data-bs-toggle="tab" href="#total-sales" role="tab" aria-controls="total-sales" aria-selected="true">
							Total Sales
						</a>
					</li>
				</ul>

				<div class="card border-top-0 rounded-bottom">
					<div class="card-body tab-content" id="dashboardTabsContent">
						<div class="tab-pane fade show active" id="total-sales" role="tabpanel" aria-labelledby="total-sales-tab">
							
							<div class="row mb-3">
								<div class="col d-flex flex-column align-items-center">
									<select id="sales-person-filter" class="selectpicker btn-secondary" multiple data-actions-box="true" title="Sales People" data-selected-text-format="count" data-count-selected-text="{0} people selected" data-width="100%"></select>
								</div>
							</div>

							<div class="row">
								<div class="col">
									<div id="sales-bar-chart" style="width: 100%; height: calc(100vh - 210px);"></div>
								</div>
							</div>
							
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
<% end %>

<% if @start_date.present? and @end_date.present? %>

	<script>
		$(document).ready(function() {
			
			const salesRecords = <%= raw @sales_records.to_json %>;
			const salesPeople = <%= raw @sales_people.to_json %>;
			const Items = <%= raw @items.to_json %>;

			console.log("Sales Records:", salesRecords);
			console.log("Sales People:", salesPeople);
			console.log("Items:", Items);

			const salesPersonIdToName = {};
			salesPeople.forEach(sp => {
				const name = `${sp.first_name} ${sp.last_name}`.trim().replace(/\s+/g, ' ');
				salesPersonIdToName[sp.id] = name;
			});

			const totalsByPerson = {};

			salesRecords.forEach(record => {
				const name = (salesPersonIdToName[record.sales_person_id]).trim().replace(/\s+/g, ' ');
				const price = Number(record.item_price);

				if (!totalsByPerson[name]) totalsByPerson[name] = 0;
				totalsByPerson[name] += price;
			});

			const allSortedData = Object.entries(totalsByPerson).sort((a, b) => a[0].localeCompare(b[0]));
			console.log(allSortedData);
			
			function populateTotalSalesSalesPersonSelect(allSortedData) {
				const uniqueNames = [...new Set(allSortedData.map(([name]) => name))].sort();

				let select = $('#sales-person-filter');
				select.find('option').remove();

				const optionsHtml = uniqueNames.map(name => 
					new Option(name, name, true, true).outerHTML
				).join('');

				select.html(optionsHtml);
				select.selectpicker('destroy');
				select.selectpicker();
			}
			
			function renderTotalSalesChart() {
				const selectedNames = $('#sales-person-filter').val();	

				const filteredData = allSortedData.filter(([name, _]) => {
    			return selectedNames.includes(name);
  			});

				const categories = filteredData.map(([name]) => name);
				const data = filteredData.map(([_, total]) => total);

				Highcharts.chart('sales-bar-chart', {
					chart: {
						type: 'column'
					},
					title: {
						<% if @start_date == @end_date %>
							text: 'Total Sales for <%= Date.parse(@start_date).strftime("%m/%d/%Y") %>'
						<% else %>
							text: 'Total Sales from <%= Date.parse(@start_date).strftime("%m/%d/%Y") %> to <%= Date.parse(@end_date).strftime("%m/%d/%Y") %>'
						<% end %>
					},
					xAxis: {
						categories: categories,
						title: { text: 'Sales Person' }
					},
					yAxis: {
						min: 0,
						title: { text: 'Total Sales ($)' }
					},
					tooltip: {
						enabled: false
					},
					plotOptions: {
						column: {
							cursor: 'pointer',
							point: {
								events: {
									click: function() {
										showTotalSalesRecordsForClickedPerson(this.category);
									}
								}
							},
							dataLabels: {
								enabled: true,
								formatter: function() {
									return '$' + Highcharts.numberFormat(this.y, 0, '.', ',');
								},
								style: {
									color: '#333',
									fontSize: '16px'
								}
							}
						}
					},
					series: [{
						name: 'Total Sales',
						data: data,
						color: '#193856'
					}],
					exporting: {
						enabled: true
					}
				});
    	}

			function showTotalSalesRecordsForClickedPerson(clickedName) {
				const salesPersonId = Object.keys(salesPersonIdToName).find(
					id => salesPersonIdToName[id] === clickedName
				);

				const filteredRecords = salesRecords
					.filter(record => record.sales_person_id == salesPersonId)
					.sort((a, b) => new Date(a.sell_date) - new Date(b.sell_date));

				console.log(`Sales records for ${clickedName}:`, filteredRecords);
				document.getElementById('salesPersonName').textContent = clickedName;
				document.getElementById('salesPersonRecordCount').textContent = filteredRecords.length;

				const tbody = document.querySelector('#totalSalesTableBody');
				tbody.innerHTML = '';

				let overallTotal = 0;

				// Group records by date
				const groupedByDate = {};
				filteredRecords.forEach(record => {
					const date = luxon.DateTime.fromISO(record.sell_date).toFormat('MM/dd/yyyy');
					if (!groupedByDate[date]) groupedByDate[date] = [];
					groupedByDate[date].push(record);
				});

				const uniqueDates = Object.keys(groupedByDate);

				uniqueDates.forEach(date => {
					let dailyTotal = 0;
					groupedByDate[date].forEach(record => {
						
						const itemRecord = Items.find(
							item => item.id === record.item_id
						);

						const row = document.createElement('tr');
						row.innerHTML = `
							<td>${date}</td>
							<td>${itemRecord.name}</td>
							<td>$${record.item_price}</td>
						`;
						tbody.appendChild(row);
						dailyTotal += parseFloat(record.item_price);
						overallTotal += parseFloat(record.item_price);
					});

					// Only show daily total if thereâ€™s more than one day of data
					if (uniqueDates.length > 1) {
						const dailyTotalRow = document.createElement('tr');
						dailyTotalRow.classList.add('daily-total-row');
						dailyTotalRow.innerHTML = `
							<td colspan="2" style="text-align: right; font-weight: bold;">Daily Total</td>
							<td><strong>$${dailyTotal.toLocaleString()}</strong></td>
						`;
						tbody.appendChild(dailyTotalRow);
					}
				});

				// Overall total
				const totalRow = document.createElement('tr');
				totalRow.innerHTML = `
					<td colspan="2" style="text-align: right;"><strong>Grand Total</strong></td>
					<td><strong>$${overallTotal.toLocaleString()}</strong></td>
				`;
				tbody.appendChild(totalRow);

				const modal = new bootstrap.Modal(document.getElementById('salesRecordsModal'));
				modal.show();
			}

			populateTotalSalesSalesPersonSelect(allSortedData);
			renderTotalSalesChart();

			$('#sales-person-filter').on('changed.bs.select', function () {
  			renderTotalSalesChart();
			});

		});
	</script>

<% end %>