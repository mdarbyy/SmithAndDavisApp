<% if @start_date.blank? || @end_date.blank? %>
  <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
    <div class="card p-4 dashboard-card" style="max-width: 450px; width: 100%;">
      <h4 class="mb-3 text-center">Select a Date Range</h4>
      <%= form_with url: dashboard_path, method: :get, local: true do |form| %>
        <div class="mb-3">
          <%= form.label :start_date, "Start Date", class: "form-label" %>
          <div class="input-group">
            <%= form.text_field :start_date, class: "form-control datepicker", required: true, value: (params[:start_date].presence || Date.current.strftime("%m/%d/%Y")) %>
            <span class="input-group-text datepicker-icon">
              <i class="bi bi-calendar-date"></i>
            </span>
          </div>
        </div>
        <div class="mb-3">
          <%= form.label :end_date, "End Date", class: "form-label" %>
          <div class="input-group">
            <%= form.text_field :end_date, class: "form-control datepicker", required: true, value: (params[:end_date].presence || Date.current.strftime("%m/%d/%Y")) %>
            <span class="input-group-text datepicker-icon">
              <i class="bi bi-calendar-date"></i>
            </span>
          </div>
        </div>
        <div class="d-flex justify-content-end">
          <%= form.submit "View Dashboard", class: "btn btn-main", onclick:"show_spinner()" %>
        </div>
      <% end %>
    </div>
  </div>
<% else %>
    
	<div class="modal fade" id="totalSalesModal" tabindex="-1" aria-labelledby="totalSalesModalLabel" aria-hidden="true">
		<div class="modal-dialog custom-modal">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="totalSalesModalLabel"><b><span id="salesPersonName"></span></b> (<span id="salesPersonRecordCount"></span>)</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="scrollable-table">
						<table class="table content" id="totalSalesModalTable">
							<thead>
								<tr>
									<th class="stick" scope="col">Sell Date</th>
									<th class="stick" scope="col">Item</th>
									<th class="stick" scope="col">Price</th>
								</tr>
							</thead>
							<tbody id="totalSalesModalTableBody">
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="salesBreakdownModal" tabindex="-1" aria-labelledby="salesBreakdownModalLabel" aria-hidden="true">
		<div class="modal-dialog custom-modal">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="salesBreakdownModalLabel"><b><span id="itemName"></b></span> (<span id="itemCount"></span>)</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body custom-modal">
					<div class="scrollable-table">
						<table class="table content" id="salesBreakdownModalTable">
							<thead>
								<tr>
									<th class="stick" scope="col">Sales Person</th>
									<th class="stick" scope="col">Sell Date</th>
									<th class="stick" scope="col">Price</th>
								</tr>
							</thead>
							<tbody id="salesBreakdownModalTableBody">
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<div class="container-fluid">
		<div class="row">
			<div class="col-12 col-md-3">
				<div class="row mb-4">
          <div class="col">
            <div class="card p-4 dashboard-card">
              <h5 class="mb-3 text-center">Change the Date Range</h5>
              <%= form_with url: dashboard_path, method: :get, local: true do |form| %>
                <div class="mb-3">
                  <%= form.label :start_date, "Start Date", class: "form-label" %>
                  <div class="input-group">
                    <%= form.text_field :start_date, class: "form-control datepicker", required: true, value: (params[:start_date].presence || Date.current.strftime("%m/%d/%Y")) %>
                    <span class="input-group-text datepicker-icon">
                      <i class="bi bi-calendar-date"></i>
                    </span>
                  </div>
                </div>
                <div class="mb-3">
                  <%= form.label :end_date, "End Date", class: "form-label" %>
                  <div class="input-group">
                    <%= form.text_field :end_date, class: "form-control datepicker", required: true, value: (params[:end_date].presence || Date.current.strftime("%m/%d/%Y")) %>
                    <span class="input-group-text datepicker-icon">
                      <i class="bi bi-calendar-date"></i>
                    </span>
                  </div>
                </div>
                <div class="d-flex justify-content-end">
                  <%= form.submit "Submit", class: "btn btn-main", onclick:"show_spinner()" %>
                </div>
              <% end %>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col">
            <div class="card p-4 dashboard-card" id="filterCard">
              <h5 class="mb-2 text-center">Filters</h5>

              <div class="row mb-3">
								<div class="col d-flex flex-column align-items-center">
									<select id="sales-person-filter" class="selectpicker btn-secondary filter-select" multiple data-actions-box="true" title="Sales People" data-selected-text-format="count" data-count-selected-text="{0} people selected" data-width="100%"></select>
								</div>
							</div>

              <div class="row">
								<div class="col d-flex flex-column align-items-center">
									<select id="item-filter" class="selectpicker btn-secondary filter-select" multiple data-actions-box="true" title="Items" data-selected-text-format="count" data-count-selected-text="{0} items selected" data-width="100%"></select>
								</div>
							</div>
            </div>
          </div>
        </div>
			</div>

			<div class="col-12 col-md-9">
				<ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
					<li class="nav-item dashboard-card" role="presentation">
						<a class="nav-link active" id="total-sales-tab" data-bs-toggle="tab" href="#total-sales" role="tab" aria-controls="total-sales" aria-selected="true">
							Total Sales
						</a>
					</li>
					<li class="nav-item dashboard-card" role="presentation">
						<a class="nav-link" id="sales-breakdown-tab" data-bs-toggle="tab" href="#sales-breakdown" role="tab" aria-controls="sales-breakdown" aria-selected="true">
							Sales Breakdown
						</a>
					</li>
				</ul>

				<div class="card border-top-0 rounded-bottom dashboard-card">
					<div class="card-body tab-content" id="dashboardTabsContent">
						<div class="tab-pane fade show active" id="total-sales" role="tabpanel" aria-labelledby="total-sales-tab">
							<div class="row">
								<div class="col">
									<div id="total-sales-chart" class="dashboard-content"></div>
								</div>
							</div>
						</div>
						<div class="tab-pane fade show" id="sales-breakdown" role="tabpanel" aria-labelledby="sales-breakdown-tab">
							<div class="row">
								<div class="col">
									<div class="scrollable-table dashboard-content">
										<table class="table content" id="salesBreakdownTable">
											<thead>
												<tr>
													<th class="stick" scope="col">Item</th>
													<th class="stick" scope="col">Amount Sold</th>
												</tr>
											</thead>
											<tbody id="salesBreakdownTableBody">
											</tbody>
										</table>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
<% end %>

<% if @start_date.present? and @end_date.present? %>
	<script>
		$(document).ready(function() {
			
      function updateFilterSection() {
        const card = document.getElementById("filterCard");
        const selects = document.querySelectorAll('.filter-select');
        const screenHeight = window.innerHeight;

        selects.forEach(select => {
          if (screenHeight <= 900){
            select.setAttribute('data-dropup-auto', 'false');
            select.classList.add('dropup');
            card.classList.add('pb-3');
          } else {
            select.setAttribute('data-dropup-auto', 'false');
            select.classList.remove('dropup');
            select.classList.add('dropdown');
            card.classList.remove('pb-3');
          }
        });
      }
      
      document.addEventListener('DOMContentLoaded', updateFilterSection);
      window.addEventListener('resize', updateFilterSection);

      updateFilterSection();

      console.log("Height: " + window.innerHeight);
      
      const salesRecords = <%= raw @sales_records.to_json %>;
			const salesPeople = <%= raw @sales_people.to_json %>;
			const Items = <%= raw @items.to_json %>;

			console.log("Sales Records:", salesRecords);
			console.log("Sales People:", salesPeople);
			console.log("Items:", Items);

			const salesPersonIdToName = {};
			salesPeople.forEach(sp => {
				const name = `${sp.first_name} ${sp.last_name}`.trim().replace(/\s+/g, ' ');
				salesPersonIdToName[sp.id] = name;
			});

      console.log("SalesPersonIdToName: ", salesPersonIdToName);

      const itemIdToName = {};
			Items.forEach(item => {
				itemIdToName[item.id] = item.name;
			});

      console.log("ItemIdToName: ", itemIdToName);

			const totalsByPerson = {};
      salesRecords.forEach(record => {
        const name = (salesPersonIdToName[record.sales_person_id] || '').trim().replace(/\s+/g, ' ');
        const itemId = record.item_id;
        const item = itemIdToName[itemId];
        const price = Number(record.item_price);

        if (!totalsByPerson[name]) totalsByPerson[name] = {};
        if (!totalsByPerson[name][item]) totalsByPerson[name][item] = 0;
        totalsByPerson[name][item] += price;
      });

			const allSortedData = Object.entries(totalsByPerson).sort((a, b) => a[0].localeCompare(b[0]));
			console.log("All Sorted Data: ", allSortedData);

			const groupedSales = {};
			salesRecords.forEach(record => {
				if (!groupedSales[record.item_id]) {
					groupedSales[record.item_id] = {
						name: itemIdToName[record.item_id],
						records: []
					};
				}
				groupedSales[record.item_id].records.push(record);
        record.sales_person_name = salesPersonIdToName[record.sales_person_id];
			});

			const groupedSalesArray = Object.entries(groupedSales).map(([item_id, data]) => ({
        item_id,
        name: data.name,
        records: data.records
      }));
      
			groupedSalesArray.sort((a, b) => {
        const recordDiff = b.records.length - a.records.length;

        if (recordDiff !== 0) {
          return recordDiff; // sort by record count (descending)
        }

        return a.name.localeCompare(b.name); // sort by name (ascending)
      });

      console.log("Grouped Sales Array: ", groupedSalesArray);

      const nameToSalesPersonId = {};
      Object.entries(salesPersonIdToName).forEach(([id, name]) => {
        nameToSalesPersonId[name] = parseInt(id);
      });

      console.log("Name To Sales Person Id: ", nameToSalesPersonId);

			function populateItemSelect(){
				const select = $('#item-filter');
				select.find('option').remove();

				const sortedItems = [...groupedSalesArray].sort((a, b) =>
          a.name.toLowerCase().localeCompare(b.name.toLowerCase())
        );
        
        const optionsHtml = sortedItems.map(item =>
					new Option(item.name, item.item_id, true, true).outerHTML
				).join('');

				select.html(optionsHtml);
				select.selectpicker('destroy');
				select.selectpicker();
			}
			
			function populateSalesPersonSelect() {
				const uniqueNames = [...new Set(allSortedData.map(([name]) => name))].sort();

				let select = $('#sales-person-filter');
				select.find('option').remove();

				const optionsHtml = uniqueNames.map(name => {
          const id = nameToSalesPersonId[name];
          return new Option(name, id, true, true).outerHTML;
        }).join('');

				select.html(optionsHtml);
				select.selectpicker('destroy');
				select.selectpicker();
			}

			function renderSalesBreakdownTable(){
				const selectedItemIds = $('#item-filter').val();
        const selectedSalesPeopleIds = $('#sales-person-filter').val();
        
				const tableBody = $('#salesBreakdownTableBody');
  			tableBody.empty();
				if (!selectedItemIds || selectedItemIds.length === 0) return;

				// Filter to only selected items
				let filteredItems = groupedSalesArray.filter(item =>
					selectedItemIds.includes(item.item_id)
				);

				filteredItems = filteredItems.map(item => {
          const filteredRecords = item.records.filter(record =>
            selectedSalesPeopleIds.includes(record.sales_person_id.toString())
          );
          return {
            ...item,
            records: filteredRecords
          };
        }).filter(item => item.records.length > 0);

        filteredItems.forEach(item => {
          const rowHtml = `
            <tr>
              <td>${item.name}</td>
              <td><a href="#" class="nav-link clickable-item" data-item-id="${item.item_id}">${item.records.length}</a></td>
            </tr>
          `;
          tableBody.append(rowHtml);
        });
			}
			
			function renderTotalSalesChart() {
				const selectedPeople = $('#sales-person-filter').val();
        const selectedItems = $('#item-filter').val();

        const selectedItemNames = selectedItems
        .map(id => itemIdToName[id.toString()])
        .filter(name => !!name);
        
        const selectedPeopleNames = selectedPeople
        .map(id => salesPersonIdToName[id.toString()]);

				const filteredData = selectedPeopleNames.map(name => {
          const itemTotals = totalsByPerson[name] || {};
          const total = Object.entries(itemTotals)
            .filter(([itemName]) => selectedItemNames.includes(itemName))
            .reduce((sum, [, amount]) => sum + amount, 0);
          return [name, total];
        }).filter(([, total]) => total > 0);

				const nameToSalesPersonId = {};
				Object.entries(salesPersonIdToName).forEach(([id, name]) => {
					nameToSalesPersonId[name] = parseInt(id);
				});

				const filteredSales = salesRecords.filter(record =>
          selectedPeople.includes(record.sales_person_id.toString()) &&
          selectedItems.includes(record.item_id.toString())
        );

        const totalSales = filteredSales.reduce((accumulator, sale) =>{
          return accumulator + sale.item_price;
        }, 0);

				const categories = filteredData.map(([name]) => name);
				const data = filteredData.map(([name, total]) => {
          const id = nameToSalesPersonId[name];
          const count = salesRecords.filter(record =>
            record.sales_person_id === id &&
            selectedItems.includes(record.item_id.toString())
          ).length;
          return {
            y: total,
            custom: { count: count }
          };
        });

				Highcharts.chart('total-sales-chart', {
					chart: {
						type: 'column',
            marginTop: 130
					},
					title: {
            useHTML: true,
						text: 
            `<div style="text-align: center;">
              <div style="font-size: 22px; font-weight: bold; color: #333;">
                <% if @start_date == @end_date %>
                  Total Sales for <%= @start_date.strftime("%m/%d/%Y") %>
                <% else %>
                  Total Sales from <%= @start_date.strftime("%m/%d/%Y") %> to <%= @end_date.strftime("%m/%d/%Y") %>
                <% end %>
              </div>
            </div>
            `
					},
					subtitle: {
						useHTML: true,
            text: `
              <div style="text-align: center;">
                <div style="font-size: 18px; font-weight: bold; color: #333;">
                  $${Highcharts.numberFormat(totalSales, 0, '.', ',')}
                </div>
                <div style="font-size: 14px; font-weight: bold; color: #777;">
                  ${filteredSales.length} sale${filteredSales.length === 1 ? '' : 's'}
                </div>
              </div>
            `
					},
					xAxis: {
						categories: categories,
						title: { text: 'Sales Person' },
					},
					yAxis: {
						min: 0,
						title: { text: 'Total Sales ($)' }
					},
					tooltip: {
						enabled: false
					},
					plotOptions: {
						column: {
							cursor: 'pointer',
							point: {
								events: {
									click: function() {
										showTotalSalesForClickedPerson(this.category);
									}
								}
							},
							dataLabels: {
                enabled: true,
                inside: false,
                crop: false,
                overflow: 'none',
                useHTML: true,
                formatter: function() {
                  const sales = '$' + Highcharts.numberFormat(this.y, 0, '.', ',');
                  const count = this.point.custom?.count || 0;
                  return `<div style="text-align: center;">
                    <div>${sales}</div>
                    <div style="font-size: 12px; color: #777;">${count} sale${count === 1 ? '' : 's'}</div>
                  </div>`;
                },
                style: {
                  color: '#333',
                  fontSize: '14px'
                }
              }
						}
					},
					series: [{
						name: 'Total Sales',
						data: data,
						color: '#193856'
					}],
					exporting: {
						enabled: true
					},
          credits: {
            enabled: false
          }
				});
    	}

			function showTotalSalesForClickedPerson(clickedName) {
				const salesPersonId = Object.keys(salesPersonIdToName).find(
					id => salesPersonIdToName[id] === clickedName
				);

				const selectedItemIds = $('#item-filter').val() || [];

        const filteredRecords = salesRecords
        .filter(record =>
          record.sales_person_id == salesPersonId &&
          selectedItemIds.includes(record.item_id.toString())
        );

				console.log(`Sales records for ${clickedName}:`, filteredRecords);
				document.getElementById('salesPersonName').textContent = clickedName;
				document.getElementById('salesPersonRecordCount').textContent = filteredRecords.length;

				const tbody = document.querySelector('#totalSalesModalTableBody');
				tbody.innerHTML = '';

				let overallTotal = 0;

				// Group records by date
				const groupedByDate = {};
				filteredRecords.forEach(record => {
					const date = luxon.DateTime.fromISO(record.sell_date).toFormat('MM/dd/yyyy');
					if (!groupedByDate[date]) groupedByDate[date] = [];
					groupedByDate[date].push(record);
				});

				const uniqueDates = Object.keys(groupedByDate);

				uniqueDates.forEach(date => {
					let dailyTotal = 0;
					groupedByDate[date].forEach(record => {
						
						const itemRecord = Items.find(
							item => item.id === record.item_id
						);

						const row = document.createElement('tr');
						row.innerHTML = `
							<td>${date}</td>
							<td>${itemRecord.name}</td>
							<td>$${record.item_price}</td>
						`;
						tbody.appendChild(row);
						dailyTotal += parseFloat(record.item_price);
						overallTotal += parseFloat(record.item_price);
					});

					// Only show daily total if there’s more than one day of data
					if (uniqueDates.length > 1) {
						const dailyTotalRow = document.createElement('tr');
						dailyTotalRow.classList.add('daily-total-row');
						dailyTotalRow.innerHTML = `
							<td colspan="2" style="text-align: right; font-weight: bold;">Day Total</td>
							<td><strong>$${dailyTotal.toLocaleString()}</strong></td>
						`;
						tbody.appendChild(dailyTotalRow);
					}

          //add a row for spacing
          const spaceRow = document.createElement('tr');
          spaceRow.innerHTML = `
					<td colspan="3"></td>
				  `;
          tbody.appendChild(spaceRow);
				});

				// Overall total
				const totalRow = document.createElement('tr');
				totalRow.innerHTML = `
					<td colspan="2" style="text-align: right;"><strong>Grand Total</strong></td>
					<td><strong>$${overallTotal.toLocaleString()}</strong></td>
				`;
				tbody.appendChild(totalRow);

				const modal = new bootstrap.Modal(document.getElementById('totalSalesModal'));
				modal.show();
			}

			populateSalesPersonSelect();
      populateItemSelect();
			renderTotalSalesChart();
			renderSalesBreakdownTable();

			$('#item-filter').on('changed.bs.select', function () {
				renderTotalSalesChart();
        renderSalesBreakdownTable();
			});

			$('#sales-person-filter').on('changed.bs.select', function () {
  			renderTotalSalesChart();
        renderSalesBreakdownTable();
			});

			$(document).on('click', '.clickable-item', function (e) {
				e.preventDefault();

				const itemId = $(this).data('item-id');
				const itemData = groupedSales[itemId];

				if (!itemData) return;

				const itemName = itemData.name;
				const records = itemData.records;

        records.sort((a, b) => 
          luxon.DateTime.fromISO(a.sell_date) - luxon.DateTime.fromISO(b.sell_date)
        );

				// Set modal title values
				$('#itemName').text(itemName);
				$('#itemCount').text(records.length);

				// Build table rows
				const rowsHtml = records.map(record => {
					const salesPersonName = salesPersonIdToName[record.sales_person_id];
					const sellDate = luxon.DateTime.fromISO(record.sell_date).toFormat('MM/dd/yyyy');
					const itemPrice = `$${parseFloat(record.item_price)}`;

					return `
						<tr>
							<td>${salesPersonName}</td>
							<td>${sellDate}</td>
							<td>${itemPrice}</td>
						</tr>
					`;
				}).join('');

				// Inject the rows into the modal table
				$('#salesBreakdownModalTableBody').html(rowsHtml);

				// Show the modal (jQuery-based Bootstrap call)
				$('#salesBreakdownModal').modal('show');
			});

		});
	</script>
<% end %>